{"version":3,"sources":["serviceWorker.js","components/Card/Card.js","components/CardList/CardList.js","components/SearchBox/SearchBox.js","components/Scroll/Scroll.js","components/ErrorBoundry.js","containers/App.js","action.js","constants.js","reducer.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","name","email","img","className","style","minWidth","src","alt","CardList","robots","cardComponent","map","user","i","key","id","SearchBox","searchField","searchChange","type","placeholder","onChange","Scroll","props","overflowY","border","height","children","ErrorBoundry","state","hasError","err","info","this","setState","React","Component","App","onRequestRobots","onSearch","isPending","filterRobots","filter","robot","toLowerCase","includes","connect","searchRobots","requestRobots","error","dispatch","event","payload","target","value","fetch","then","response","json","users","catch","initialState","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.435cd6c2.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\n\n// import './App.css';\nimport 'tachyons'\n\nconst Card =({name ,email, img}) =>{\n  // const { name ,email, img } = props;\n  return (\n    <div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\" style={{minWidth:'308px'}}>\n      <img src={img} alt=\"\"/>\n      <div>\n        <h2>\n          {name}\n        </h2>\n  <p>{email}</p>\n      </div>\n    </div>\n  )\n}\n\nexport default Card;\n","import React, { Fragment } from \"react\";\r\nimport Card from '../Card/Card';\r\nconst CardList = ({robots}) => {\r\n  const cardComponent = robots.map((user,i)=>{\r\n    return <Card\r\n    key = {i}\r\n    name={robots[i].name}\r\n    email={robots[i].email}\r\n    img={`https://robohash.org/${robots[i].id}?size=200x200`}\r\n  />\r\n  })\r\n  return (\r\n    <Fragment>\r\n      {cardComponent}\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default CardList\r\n","import React from 'react';\r\n\r\nconst SearchBox = ({searchField,searchChange}) =>{\r\n  return (\r\n    <div className=\"pa2\">\r\n      <input className=\"pa3 ba b--green bg-lightest-blue\" type=\"search\" placeholder=\"search robots\" onChange={searchChange}/>\r\n      <br />\r\n      <br />\r\n      <hr/>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props)=>{\r\n\r\n  return (\r\n    <div style={{overflowY:'scroll', border:'5px solid black', height:'500px'}}>\r\n      {props.children}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Scroll;","import React from 'react';\r\n\r\nclass ErrorBoundry extends React.Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      hasError :false\r\n    }\r\n  }\r\n\r\n  componentDidCatch(err,info){\r\n    this.setState({\r\n      hasError:true\r\n    })\r\n  }\r\n  render(){\r\n    if(this.state.hasError){\r\n      return <h1>Opps..That is not good </h1>\r\n    }\r\n\r\n    return this.props.children\r\n  }\r\n}\r\n\r\nexport default ErrorBoundry;","import React from \"react\";\r\nimport CardList from \"../components/CardList/CardList\";\r\nimport SearchBox from \"../components/SearchBox/SearchBox\";\r\n// import {robots} from './robots';\r\nimport Scroll from \"../components/Scroll/Scroll\";\r\nimport ErrorBoundry from \"../components/ErrorBoundry\";\r\nimport \"./App.css\";\r\nimport { setSearchField, requestRobots } from \"../action\";\r\nimport { connect } from \"react-redux\";\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    searchField: state.searchRobots.searchField,\r\n    robots: state.requestRobots.robots,\r\n    isPending: state.requestRobots.isPending,\r\n    error: state.requestRobots.error\r\n  };\r\n};\r\n\r\nconst mapDispachToProps = (dispatch) => {\r\n  return {\r\n    onSearch: (event) => dispatch(setSearchField(event.target.value)),\r\n    onRequestRobots: () => dispatch(requestRobots())\r\n  };\r\n};\r\nclass App extends React.Component {\r\n  // constructor() {\r\n  //   super();\r\n  //   this.state = {\r\n  //     robots: []\r\n  //     // searchField: \"\",\r\n  //   };\r\n  // }\r\n  componentDidMount() {\r\n    // console.log('store ',this.props.store.getState());\r\n    // fetch(\"https://jsonplaceholder.typicode.com/users\")\r\n    //   .then((response) => response.json())\r\n    //   .then((users) => this.setState({ robots: users }))\r\n    //   .catch((err) => console.log(\"err\", err));\r\n\r\n    this.props.onRequestRobots();\r\n  }\r\n\r\n  render() {\r\n    // const {robots } = this.state;\r\n    const { searchField, onSearch, robots , isPending } = this.props;\r\n\r\n    const filterRobots = robots.filter((robot) => {\r\n      return (\r\n        robot.name\r\n          .toLowerCase()\r\n          // .includes(this.state.searchField.toLowerCase());\r\n          .includes(searchField.toLowerCase())\r\n      );\r\n    });\r\n    if (isPending) {\r\n      return <h1> Loading </h1>;\r\n    } else {\r\n      return (\r\n        <div className=\"tc\">\r\n          <h1 className=\"f1\">RoboFriends</h1>\r\n          <SearchBox searchChange={onSearch} />\r\n          <Scroll>\r\n            <ErrorBoundry>\r\n              <CardList robots={filterRobots} />\r\n            </ErrorBoundry>\r\n          </Scroll>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispachToProps)(App);\r\n","import { \r\n  CHANGE_SEARCH_FIELD,\r\n  REQ_PENDING,\r\n  REQ_SUCCESS,\r\n  REQ_FAILED\r\n } from \"./constants\";\r\n\r\nexport const setSearchField = (text) => ({\r\n  type: CHANGE_SEARCH_FIELD,\r\n  payload: text,\r\n});\r\n\r\nexport const requestRobots  = () => (dispatch) =>{\r\n  dispatch({type:REQ_PENDING})\r\n  fetch(\"https://jsonplaceholder.typicode.com/users\")\r\n      .then((response) => response.json())\r\n      .then((users) => dispatch({ type:REQ_SUCCESS,payload:users}) )\r\n      .catch((err) => dispatch({ type:REQ_FAILED,payload:err}));\r\n}\r\n","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\nexport const REQ_PENDING = 'REQ_PENDING';\r\nexport const REQ_SUCCESS = 'REQ_SUCCESS';\r\nexport const REQ_FAILED = 'REQ_FAILED';","import { \r\n  CHANGE_SEARCH_FIELD,\r\n  REQ_PENDING,\r\n  REQ_SUCCESS,\r\n  REQ_FAILED\r\n } from \"./constants\";\r\n\r\nconst initialState = {\r\n  searchField:'',\r\n}\r\n\r\nexport const searchRobots = (state=initialState, action={}) =>{\r\n  switch(action.type){\r\n    case CHANGE_SEARCH_FIELD : \r\n      return Object.assign({},state,{searchField : action.payload})\r\n      // return  {...state,searchField : action.payload}\r\n      default:\r\n        return state\r\n  }\r\n}\r\n\r\nconst initialStateRobots = {\r\n  isPending:false,\r\n  robots:[],\r\n  error:''\r\n}\r\nexport const requestRobots = (state=initialStateRobots, action={}) =>{\r\n  switch(action.type){\r\n    case REQ_PENDING : \r\n      return Object.assign({},state,{isPending : true})\r\n    case REQ_SUCCESS : \r\n      return Object.assign({},state,{isPending:false,robots:action.payload})\r\n    case REQ_FAILED :\r\n      return Object.assign({},state,{isPending:false,error:action.payload})\r\n      default:\r\n        return state\r\n  }\r\n}","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport App from \"./containers/App\";\nimport { Provider } from \"react-redux\";\nimport thunkMiddleware from 'redux-thunk';\nimport { createStore,applyMiddleware,combineReducers } from \"redux\";\nimport { createLogger } from 'redux-logger';\nimport { searchRobots , requestRobots } from \"./reducer\";\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({searchRobots,requestRobots});\nconst store = createStore(rootReducer,applyMiddleware(thunkMiddleware, logger));\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}