{"version":3,"sources":["serviceWorker.js","components/Card/Card.js","components/CardList/CardList.js","components/SearchBox/SearchBox.js","components/Scroll/Scroll.js","components/ErrorBoundry.js","containers/App.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","name","email","img","className","src","alt","CardList","robots","cardComponent","map","user","i","key","id","SearchBox","searchField","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","state","hasError","err","info","this","setState","React","Component","App","onSearch","event","console","log","target","value","fetch","then","response","json","users","catch","filterRobots","filter","robot","toLowerCase","includes","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"sMAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,gCCESC,G,MAfH,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,MAAOC,EAAQ,EAARA,IAEzB,OACE,yBAAKC,UAAU,uDACb,yBAAKC,IAAKF,EAAKG,IAAI,KACnB,6BACE,4BACGL,GAET,2BAAIC,OCISK,EAhBE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OACXC,EAAgBD,EAAOE,KAAI,SAACC,EAAKC,GACrC,OAAO,kBAAC,EAAD,CACPC,IAAOD,EACPX,KAAMO,EAAOI,GAAGX,KAChBC,MAAOM,EAAOI,GAAGV,MACjBC,IAAG,+BAA0BK,EAAOI,GAAGE,GAApC,sBAGL,OACE,kBAAC,WAAD,KACGL,ICHQM,EARG,SAAC,GAA8B,EAA7BC,YAA8B,IAAlBC,EAAiB,EAAjBA,aAC9B,OACE,yBAAKb,UAAU,OACb,2BAAOA,UAAU,mCAAmCc,KAAK,SAASC,YAAY,gBAAgBC,SAAUH,MCM/FI,EATA,SAACC,GAEd,OACE,yBAAKC,MAAO,CAACC,UAAU,SAAUC,OAAO,kBAAmBC,OAAO,UAC/DJ,EAAMK,WCkBEC,E,kDArBb,WAAYN,GAAO,IAAD,8BAChB,cAAMA,IACDO,MAAQ,CACXC,UAAU,GAHI,E,8DAOAC,EAAIC,GACpBC,KAAKC,SAAS,CACZJ,UAAS,M,+BAIX,OAAGG,KAAKJ,MAAMC,SACL,uDAGFG,KAAKX,MAAMK,a,GAlBKQ,IAAMC,WCgDlBC,G,wDAzCb,aAAe,IAAD,8BACZ,gBAYFC,SAAW,SAACC,GACVC,QAAQC,IAAIF,EAAMG,OAAOC,OACzB,EAAKT,SAAS,CAAElB,YAAauB,EAAMG,OAAOC,SAb1C,EAAKd,MAAQ,CACXrB,OAAQ,GACRQ,YAAa,IAJH,E,gEAOO,IAAD,OAClB4B,MAAM,8CACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GAAD,OAAW,EAAKd,SAAS,CAAE1B,OAAQwC,OACxCC,OAAM,SAAClB,GAAD,OAASS,QAAQC,IAAI,MAAOV,Q,+BAM7B,IAAD,OACDmB,EAAejB,KAAKJ,MAAMrB,OAAO2C,QAAO,SAACC,GAC7C,OAAOA,EAAMnD,KACVoD,cACAC,SAAS,EAAKzB,MAAMb,YAAYqC,kBAErC,OAA0B,IAAtBpB,KAAKJ,MAAMrB,OACN,yCAGL,yBAAKJ,UAAU,MACb,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWa,aAAcgB,KAAKK,WAC9B,kBAAC,EAAD,KACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAU9B,OAAQ0C,W,GAjCdf,IAAMC,YCHxBmB,IAASC,OACP,kBAAC,IAAMC,WAAP,KACA,kBAAC,EAAD,OAEAC,SAASC,eAAe,SP0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjB,MAAK,SAAAkB,GACJA,EAAaC,gBAEdf,OAAM,SAAAgB,GACLzB,QAAQyB,MAAMA,EAAMC,a","file":"static/js/main.fc1bc6af.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\n\n// import './App.css';\nimport 'tachyons'\n\nconst Card =({name ,email, img}) =>{\n  // const { name ,email, img } = props;\n  return (\n    <div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\n      <img src={img} alt=\"\"/>\n      <div>\n        <h2>\n          {name}\n        </h2>\n  <p>{email}</p>\n      </div>\n    </div>\n  )\n}\n\nexport default Card;\n","import React, { Fragment } from \"react\";\r\nimport Card from '../Card/Card';\r\nconst CardList = ({robots}) => {\r\n  const cardComponent = robots.map((user,i)=>{\r\n    return <Card\r\n    key = {i}\r\n    name={robots[i].name}\r\n    email={robots[i].email}\r\n    img={`https://robohash.org/${robots[i].id}?size=200x200`}\r\n  />\r\n  })\r\n  return (\r\n    <Fragment>\r\n      {cardComponent}\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default CardList\r\n","import React from 'react';\r\n\r\nconst SearchBox = ({searchField,searchChange}) =>{\r\n  return (\r\n    <div className=\"pa2\">\r\n      <input className=\"pa3 ba b--green bg-lightest-blue\" type=\"search\" placeholder=\"search robots\" onChange={searchChange}/>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props)=>{\r\n\r\n  return (\r\n    <div style={{overflowY:'scroll', border:'5px solid black', height:'500px'}}>\r\n      {props.children}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Scroll;","import React from 'react';\r\n\r\nclass ErrorBoundry extends React.Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      hasError :false\r\n    }\r\n  }\r\n\r\n  componentDidCatch(err,info){\r\n    this.setState({\r\n      hasError:true\r\n    })\r\n  }\r\n  render(){\r\n    if(this.state.hasError){\r\n      return <h1>Opps..That is not good </h1>\r\n    }\r\n\r\n    return this.props.children\r\n  }\r\n}\r\n\r\nexport default ErrorBoundry;","import React from \"react\";\r\nimport CardList from \"../components/CardList/CardList\";\r\nimport SearchBox from \"../components/SearchBox/SearchBox\";\r\n// import {robots} from './robots';\r\nimport Scroll from \"../components/Scroll/Scroll\";\r\nimport ErrorBoundry from \"../components/ErrorBoundry\";\r\nimport \"./App.css\";\r\n\r\nclass App extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      robots: [],\r\n      searchField: \"\",\r\n    };\r\n  }\r\n  componentDidMount() {\r\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\r\n      .then((response) => response.json())\r\n      .then((users) => this.setState({ robots: users }))\r\n      .catch((err) => console.log(\"err\", err));\r\n  }\r\n  onSearch = (event) => {\r\n    console.log(event.target.value);\r\n    this.setState({ searchField: event.target.value });\r\n  };\r\n  render() {\r\n    const filterRobots = this.state.robots.filter((robot) => {\r\n      return robot.name\r\n        .toLowerCase()\r\n        .includes(this.state.searchField.toLowerCase());\r\n    });\r\n    if (this.state.robots === 0) {\r\n      return <h1> Loading </h1>;\r\n    } else {\r\n      return (\r\n        <div className=\"tc\">\r\n          <h1 className=\"f1\">RoboFriends</h1>\r\n          <SearchBox searchChange={this.onSearch} />\r\n          <Scroll>\r\n            <ErrorBoundry>\r\n              <CardList robots={filterRobots} />\r\n            </ErrorBoundry>\r\n          </Scroll>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport App from './containers/App'\nReactDOM.render(\n  <React.StrictMode>\n  <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}